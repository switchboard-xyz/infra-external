{{- $values := .Values -}}
{{- range $index, $key := .Values.oracleKeys }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chain: {{ $.Values.chain }}
    app: function-manager
    should_scrape: scrape
    queue: {{ $key.queue }}
    oracleID: {{ $key.name }}
    azure.workload.identity/use: "true"
  name: {{ $.Values.chain }}-{{ $key.queue }}-{{ $.Values.appType}}-{{ $key.name }}
  namespace: {{ $.Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oracle
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        chain: {{ $.Values.chain }}
        app: oracle
        queue: {{ $key.queue }}
        should_scrape: scrape
    spec:
      serviceAccountName: {{ $.Values.serviceAccount }}
      {{ if ne $.Values.appType "dind" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - oracle
            topologyKey: kubernetes.io/hostname
      {{ end }}
      dnsPolicy: ClusterFirst
      containers:
      # {{ if eq $.Values.appType "dind" }}
#
      # - image: sking2600/azure-secret-inject
        # name: secret-injector
        # volumeMounts:
        # - name: shared-data
          # mountPath: /pod-data
#
        # command: ["/bin/sh", "-c"]
        # args:
          # - node index.js {{ $values.azureVaultUrl }} {{ $values.azureSecretName }}  > /pod-data/secret
      # {{ end }}
      - image: {{ if $key.image }}{{ $key.image }}{{ else }}{{ $values.image }}{{ end }}
        env:
        -
          name: CHAIN
          value: {{ $values.chain | quote }}
        -
          name: CLUSTER
          value: {{ $values.cluster }}
        -
          name: NETWORK_ID
          value: {{ $values.networkId }}
        -
          name: PROGRAM_ID
          value: {{ $values.pid }}
        -
          name: CONTAINER_TIMEOUT
          value: {{ $values.containerTimeout | default "15" | quote }}
        -
          name: NUM_WORKERS
          value: {{ $values.numWorkers | default "10" | quote }}
        -
          name: HEARTBEAT_INTERVAL
          value: {{ if $key.heartbeatInterval }}{{ $key.heartbeatInterval | quote }}{{ else }}{{ $values.heartbeatInterval | default "30" | quote }}{{ end }}
        -
          name: ORACLE_KEY
          value: {{ $key.data | quote}}
        -
          name: EVM_ORACLE_KEY
          value: {{ $key.data | quote}}
        -
          name: PAYER_SECRET
          {{ if $values.infisicalSecretKey }}
          valueFrom:
            secretKeyRef:
              name: infisical-secret
              key: {{  $values.infisicalSecretKey | quote }}
          {{ else }}
          value: {{ $key.payerSecret }}
          {{ end }}
        - name: RUST_LOG
          value: "info"
        -
          name: RPC_URL
          value: {{ if $key.rpcUrl }}{{ $key.rpcUrl }}{{ else }}{{ $values.rpcUrl }}{{ end }}
        -
          name: QVN_URL
          value: {{ if $key.qvnUrl }}{{ $key.qvnUrl }}{{ else }}{{ $values.qvnUrl }}{{ end }}
        -
          name: WSS_URL
          value: {{ if $key.wssUrl }}{{ $key.wssUrl }}{{ else }}{{ $values.wssUrl }}{{ end }}
        -
          name: WSS_RPC_URL
          value: {{ if $key.wssUrl }}{{ $key.wssUrl }}{{ else }}{{ $values.wssUrl }}{{ end }}
        -
          name: BACKUP_RPC_URL_1
          value: {{ if $key.backupRpc1 }}{{ $key.backupRpc1 }}{{ else }}{{ $values.backupRpc1  }}{{ end }}
        -
          name: BACKUP_RPC_URL_2
          value: {{ if $key.backupRpc2 }}{{ $key.backupRpc2 }}{{ else }}{{ $values.backupRpc2  }}{{ end }}
        -
          name: TELEMETRY_FEED_RESULT_PUSH_INTERVAL_MS
          value: {{ if $key.telemetryFeedResultPushIntervalMs }}{{ $key.telemetryFeedResultPushIntervalMs | quote }}{{ else }}{{ $values.telemetryFeedResultPushIntervalMs | default "5000" | quote }}{{ end }}
        -
          name: TELEMETRY_FEED_RESULT_PUSH_URL
          value: {{ if $key.telemetryFeedResultPushUrl }}{{ $key.telemetryFeedResultPushUrl }}{{ else }}{{ $values.telemetryFeedResultPushUrl }}{{ end }}
        # TASK RUNNER CONFIG
        -
          name: TASK_RUNNER_SOLANA_RPC
          value: {{ $values.solanaMainnetRpc | default "https://switchboard.rpcpool.com/ec20ad2831092cfcef66d677539a" }}
        -
          name: GCP_CONFIG_BUCKET
          value: {{ $values.gcpConfigBucket }}
        -
          name: JUPITER_SWAP_API_KEY
          value: {{ $values.jupiterSwapApiKey | default "3a3b41bc06d49f9c89a8550ff84072be" }}
        # APTOS / EVM / SUI
        -
          name: BATCH_SAVE_RESULT_INTERVAL
          value: {{ if $key.batchSaveResultInterval }}{{ $key.batchSaveResultInterval | quote }}{{ else }}{{ $values.batchSaveResultInterval | quote }}{{ end }}
        # EVM
        -
          name: UPDATE_SEARCH_REFRESH_INTERVAL
          value: {{ if $key.updateSearchRefreshInterval }}{{ $key.updateSearchRefreshInterval | quote }}{{ else }}{{ $values.updateSearchRefreshInterval | quote }}{{ end }}
        -
          name: IPFS_API_URL
          value: {{ if $key.ipfsApiUrl }}{{ $key.ipfsApiUrl | quote }}{{ else }}{{ $values.ipfsApiUrl | quote }}{{ end }}
        -
          name: INFURA_IPFS_CREDENTIALS
          value: {{ if $key.infuraIpfsCredentials }}{{ $key.infuraIpfsCredentials | quote }}{{ else }}{{ $values.infuraIpfsCredentials | quote }}{{ end }}
        -
          name: CONTRACT_ADDRESS
          value: {{ if $key.contractAddress }}{{ $key.contractAddress | quote }}{{ else }}{{ $values.contractAddress | quote }}{{ end }}
        -
          name: CHAIN_ID
          value: {{ if $key.evmChainId }}{{ $key.evmChainId | quote }}{{ else }}{{ $values.evmChainId | quote }}{{ end }}
        -
          name: EVM_CHAIN_ID
          value: {{ if $key.evmChainId }}{{ $key.evmChainId | quote }}{{ else }}{{ $values.evmChainId | quote }}{{ end }}
        -
          name: UPDATE_SEARCH_INTERVAL
          value: {{ if $key.updateSearchInterval }}{{ $key.updateSearchInterval | quote }}{{ else }}{{ $values.updateSearchInterval | quote }}{{ end }}
        # V3
        -
          name: FUNDING_AMOUNT
          value: {{ if $key.fundingAmount }}{{ $key.fundingAmount | quote }}{{ else }}{{ $values.fundingAmount | quote }}{{ end }}
        -
          name: FUNDING_THRESHOLD
          value: {{ if $key.fundingThreshold }}{{ $key.fundingThreshold | quote }}{{ else }}{{ $values.fundingThreshold | quote }}{{ end }}
        -
          name: FUNDING_CHECK_INTERVAL
          value: {{ if $key.fundingCheckInterval }}{{ $key.fundingCheckInterval | quote }}{{ else }}{{ $values.fundingCheckInterval | quote }}{{ end }}
        # NEAR
        -
          name: NEAR_NAMED_ACCOUNT
          value: {{ $values.namedAccount }}
        -
          name: NEAR_NO_LOGS
          value: "1"
        -  # Disable using the built-in near event listener for mainnet and use AWS
          name: NEAR_LAKE_LISTENER
          value: {{ if $key.nearLakeListener }}{{ $key.nearLakeListener | quote }}{{ else }}{{ $values.nearLakeListener | default "0" | quote }}{{ end }}
        # SOLANA
        -
          name: SOLANA_DISABLE_REST_CONNECTION
          value: {{ if $key.disableRestConnection }}{{ $key.disableRestConnection | quote }}{{ else }}{{ $values.disableRestConnection | default "0" | quote  }}{{ end }}
        -
          name: SOLANA_SAVE_RESULT_COMPUTE_UNITS
          value: {{ if $key.saveResultComputeUnits }}{{ $key.saveResultComputeUnits | quote }}{{ else }}{{ $values.saveResultComputeUnits | quote  }}{{ end }}
        -
          name: SOLANA_COMPUTE_UNIT_PRICE
          value: {{ $values.computeUnitPrice | default "1" | quote }}
        -
          name: QUEUE
          value: {{ $key.queueAddress | quote  }}
        -
          name: QUOTE_KEY
          value: {{ $key.quoteAddress | quote }}
        -
          name: SAS_QUEUE
          value: {{ $key.sasQueue | quote }}
        -
          name: DISABLE_NONCE_QUEUE
          value: {{ if $key.disableNonceQueue }}{{ $key.disableNonceQueue | quote }}{{ else }}{{ $values.disableNonceQueue | default "0" | quote }}{{ end }}
        -
          name: NONCE_QUEUE_SIZE
          value: {{ if $key.nonceQueueSize }}{{ $key.nonceQueueSize | quote }}{{ else }}{{ $values.nonceQueueSize | default "1000" | quote }}{{ end }}
        -  # Auto reconnect event watcher after 1hr
          name: SOLANA_EVENT_WATCHER_AUTORECONNECT
          value: {{ if $key.autoreconnectEvents }}{{ $key.autoreconnectEvents | quote }}{{ else }}{{ $values.autoreconnectEvents | default "0" | quote }}{{ end }}
        -
          name: SOLANA_BLOCKHASH_REFRESH_RATE
          value: {{ if $key.blockhashRefreshRate }}{{ $key.blockhashRefreshRate | quote }}{{ else }}{{ $values.blockhashRefreshRate | quote  }}{{ end }}
        -
          name: ORACLE_QUEUE_KEY
          value: {{ $key.oracleQueueKey | quote }}
        -
          name: SOLANA_ORACLE_QUEUE_KEY
          value: {{ $key.oracleQueueKey | quote }}

        # STARKNET
        -
          name: STARKNET_PAYER_ADDRESS
          value: {{ if $key.starknetPayerAddress }}{{ $key.starknetPayerAddress }}{{ else }}{{ $values.starknetPayerAddress }}{{ end }}
        # PERFORMANCE
        -
          name: EVENT_LOOP_STALL_INTERVAL_ERROR
          value: {{ if $key.eventLoopStallThreshold }}{{ $key.eventLoopStallThreshold | quote }}{{ else }}{{ $values.eventLoopStallThreshold | quote }}{{ end }}
        -
          name: LAST_EVENT_STALENESS_THRESHOLD
          value: {{ if $key.lastEventStalenessThreshold }}{{ $key.lastEventStalenessThreshold | quote }}{{ else }}{{ $values.lastEventStalenessThreshold | quote }}{{ end }}
        -
          name: LAST_RESPONSE_STALENESS_THRESHOLD
          value: {{ if $key.lastResponseStalenessThreshold }}{{ $key.lastResponseStalenessThreshold | quote }}{{ else }}{{ $values.lastResponseStalenessThreshold | quote }}{{ end }}
        # METRICS
        -
          name: METRICS_EXPORTER
          value: {{ $values.metricsExporter }}
        # ALERTING
        -
          name: VERBOSE
          value: {{ if $key.verbose }}{{ $key.verbose | quote }}{{ else }}{{ $values.verbose | default "0" | quote }}{{ end }}
        -
          name: DEBUG
          value: {{ if $key.debug }}{{ $key.debug | quote }}{{ else }} {{ $values.debug | default "0" | quote }}{{ end }}
        -
          name: PAGERDUTY_EVENT_KEY
          value: {{ if $key.pagerdutyEventKey }}{{ $key.pagerdutyEventKey }}{{ else }}{{ $values.pagerdutyEventKey }}{{ end }}
        # SECRETS
        -
          name: GOOGLE_PAYER_SECRET_PATH
          value: {{ if $key.googlePayerSecretPath }}{{ $key.googlePayerSecretPath }}{{ else }}{{ $values.googlePayerSecretPath }}{{ end }}
        -
          name: GOOGLE_APPLICATION_CREDENTIALS
          value: {{ $values.googleApplicationCredentials }}

        -
          name: AWS_ACCESS_KEY_ID
          value: {{ $values.awsAccessKeyId }}
        -
          name: AWS_SECRET_ACCESS_KEY
          value: {{ $values.awsSecretAccessKey }}
        -
          name: AZURE_PAYER_SECRET_PATH
          value: {{ if $key.azureSecretPath }}{{ $key.azureSecretPath }}{{ else }}{{ $values.azureSecretPath }}{{ end }}

      # Node JS Oracle Workerpool Config
        -
          name: TASK_RUNNER_WORKER_DISABLED
          value: {{ if $key.workerpoolDisabled }}{{ $key.workerpoolDisabled | quote }}{{ else }}{{ $values.workerpoolDisabled | default "0" | quote }}{{ end }}
        -
          name: TASK_RUNNER_WORKER_JSON_PATH_DISABLED
          value: {{ if $key.workerpoolJsonPathDisabled }}{{ $key.workerpoolJsonPathDisabled | quote }}{{ else }}{{ $values.workerpoolJsonPathDisabled | default "0" | quote }}{{ end }}
        -
          name: TASK_RUNNER_WORKER_TWAP_DISABLED
          value: {{ if $key.workerpoolTwapDisabled }}{{ $key.workerpoolTwapDisabled | quote }}{{ else }}{{ $values.workerpoolTwapDisabled | default "0" | quote }}{{ end }}

        {{ if eq $.Values.appType "dind" }}
        -
          name: DOCKER_USER
          value: {{ $values.dockerUser }}
        -
          name: DOCKER_KEY
          value: {{ $values.dockerKey }}
        -
          name: IPFS_URL
          value: {{ $values.ipfsUrl }}
        -
          name: IPFS_KEY
          value: {{ $values.ipfsKey }}
        -
          name: IPFS_SECRET
          value: {{ $values.ipfsSecret }}
        {{ end }}

      # IMAGE / RESOURCES
        imagePullPolicy: IfNotPresent #Always
        name: {{ $values.chain }}-oracle
        {{ if eq $.Values.appType "dind"  }}
        command: ["/bin/sh"]
        args: ["-c", "while true; do bash /boot.sh; done"]
        {{ end }}
        {{ if eq $values.command "shell" }}
        command: ["/bin/sh"]
        args: ["-c", "while true; do echo hello; sleep 10;done"]
        {{ end }}
        {{ if eq $key.command "enableSourceMaps" }}
        command: ["/bin/bash"]
        args: ["-c", "while true ; do node --unhandled-rejections=warn --enable-source-maps ./dist/index.js; echo restarting in 10 seconds; sleep 10; done",]
        {{ end }}
        {{ if eq $.Values.appType "dind"  }}
        # command: ["/bin/sh"]
        # args: ["-c", "dockerd"]
        securityContext:
          privileged: true
        {{ end }}

        ports:
        - name: web
          containerPort: 9090
          protocol: TCP
        - name: liveness-port
          containerPort: 8080
          protocol: TCP

        # {{ if ne $values.command "shell" }}
        # # https://github.com/kubernetes/kubernetes/issues/89898#issuecomment-876539217
        # # Wait for the container to startup and signal they are ready to receive traffic from k8s
        # startupProbe:
          # httpGet:
            # path: /healthz
            # port: liveness-port
          # initialDelaySeconds: 5
          # failureThreshold: 30
          # periodSeconds: 5
          # timeoutSeconds: 10
        # # Check whether the pod is ready to receive traffic. If this fails it will create a new pod
        # livenessProbe:
          # exec:
            # command:
              # - sh
              # - -c
              # - "curl --fail http://localhost:8080/healthz || exit 1 "
          # initialDelaySeconds: 10
          # periodSeconds: 30
          # failureThreshold: 3
          # timeoutSeconds: 5
        # {{ end }}

        {{ if  $values.sgx.type }}
        # SGX ORACLE
        resources:
          limits:
            cpu: 2500m
            memory: 4000Mi
            {{ if eq $values.sgx.type "azure" }}
            sgx.intel.com/epc: 100Mi
            sgx.intel.com/enclave: 1
            sgx.intel.com/provision: 1
            {{ end }}
          requests:
            cpu: 2500m
            memory: 3900Mi
            {{ if eq $values.sgx.type "azure" }}
            sgx.intel.com/epc: 100Mi
            sgx.intel.com/enclave: 1
            sgx.intel.com/provision: 1
            {{ end }}
        {{ if not $values.command  }}
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9090
          initialDelaySeconds: 60
          failureThreshold: 10
          periodSeconds: 10
          timeoutSeconds: 10
          {{ end }}

        {{ else }}
        # LEGACY ORACLE
        # startupProbe:
          # httpGet:
            # path: /healthz
            # port: liveness-port
          # initialDelaySeconds: 5
          # failureThreshold: 30
          # periodSeconds: 5
          # timeoutSeconds: 10
        # Check whether the pod is ready to receive traffic. If this fails it will create a new pod
        # livenessProbe:
          # exec:
            # command:
              # - sh
              # - -c
              # - "curl --fail http://localhost:8080/healthz || exit 1"
          # initialDelaySeconds: 10
          # periodSeconds: 30
          # failureThreshold: 3
          # timeoutSeconds: 5
        resources:
          limits:
            cpu: 4000m
            memory: 3Gi
          requests:
            cpu: 3500m
            memory: 3Gi
        {{ end }}

        {{ if  $values.sgx.type }}
        volumeMounts:
        # - name: docker-graph-storage
        #   mountPath: /var/lib/docker
        - mountPath: /home/credentials/
          name: google-cloud-key
        - mountPath: /dev/sgx/enclave
          name: dev-sgx-enclave
        - mountPath: /dev/sgx/provision
          name: dev-sgx-provision
        # - mountPath: /var/run/docker.sock
        #   name: docker-socket
        {{ if eq $.Values.appType "dind" }}
        - mountPath: /home/dotenv
          name: dind-dotenv
        - mountPath: /var/lib/docker
          name: docker-layers
        {{ end }}
        # {{ if eq $.Values.registryMirror true }}
        # - name: docker-config
        #   mountPath: /etc/docker/daemon.json
        #   subPath: daemon.json

        # {{ end }}
        # - mountPath: /dev/isgx
          # name: dev-isgx

      volumes:
      - name: google-cloud-key
        secret:
          secretName: {{ $.Values.appType}}-service-account
      {{ if eq $.Values.appType "dind" }}
      - name: dind-dotenv
        secret:
          secretName: dind-dotenv
      - name: docker-layers
        persistentVolumeClaim:
          claimName: {{ $.Values.pvcName}}
      # - name: docker-socket
      #   hostPath:
      #     path: /var/run/docker.sock
      #     type: Socket
        {{- end }}
      - name: shared-data
        emptyDir: {}
      - name: dev-sgx-enclave
        hostPath:
          path: /dev/sgx/enclave
      - name: dev-sgx-provision
        hostPath:
          path: /dev/sgx/provision
      {{ end }}
      # - name: dev-isgx
        # hostPath:
          # path: /dev/isgx



---
{{ end }}
