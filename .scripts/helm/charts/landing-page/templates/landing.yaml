apiVersion: apps/v1
kind: Deployment

metadata:
  name: landing
  namespace: {{ $.Values.components.landing.namespace | quote }}

  labels:
    app: landing

  annotations:
    keel.sh/approvals: "0"
    keel.sh/policy: "regexp:^(canary-)?(devnet|stable)$"  # update policy (available: patch, minor, major, all, force)
    keel.sh/trigger: "poll"                                 # enable active repository checking (webhooks and GCR would still work)
    keel.sh/match-tag: "true"                               # only makes a difference when used with 'force' policy, will only update if tag matches :dev->:dev, :prod->:prod
    #keel.sh/policy: "force"
    #keel.sh/pollSchedule: "@every 1m"

spec:
  replicas: 1

  selector:
    matchLabels:
      app: landing

  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  template:
    metadata:
      annotations:
        io.katacontainers.config.hypervisor.kernel_params: " agent.guest_components_rest_api=all" # agent.aa_kbc_params=cc_kbc::http://141.95.35.110:31256"
        io.containerd.cri.runtime-handler: kata-qemu-snp
      labels:
        app: landing

    spec:
      runtimeClassName: kata-qemu-snp
      dnsPolicy: ClusterFirst # TODO: probably not needed.. to be removed

      securityContext:
        runAsNonRoot: true
        runAsUser: 10001

      containers:
      - image: {{ printf "%s:%s" $.Values.components.landing.image $.Values.components.landing.image_tag | quote }}
        imagePullPolicy: Always #Always #IfNotPresent
        name: landing

        ports:
        - name: web
          containerPort: {{ $.Values.components.landing.port }}
          protocol: TCP

        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL

        env:
        - name: SEV_SNP_CACHE_PATH
          value: "/tmp/certs"
        - name: DOCKER_IMAGE_TAG
          value: {{ $.Values.components.docker_image_tag | quote }}
        - name: REPORTEER_SERVER_PORT
          value: {{ $.Values.components.landing.port | quote }}
        - name: REPORTEER_ENDPOINT_URL
          value: {{ $.Values.components.landing.attestation_url | quote }}
        # LOGGING
        - name: RUST_LOG
          value: "info"
        - name: RUST_BACKTRACE
          value: "1"
        # ALERTING
        - name: VERBOSE
          value: {{ $.Values.verbose | default "0" | quote }}
        - name: DEBUG
          value: {{ $.Values.debug | default "false" | quote }}

        {{ if eq $.Values.components.landing.command "shell" }}
        command: [
          "/bin/sh"
        ]
        args: [
          "-c",
          "while true; do echo '==> DEBUG MODE ENABLED VIA CFG <=='; sleep 5; done;"
        ]
        {{ end }}

        {{ if not $.Values.components.landing.command }}
        readinessProbe:
          httpGet:
            path: "/health"
            port: {{ $.Values.components.landing.port }}
          initialDelaySeconds: 60
          failureThreshold: 10
          periodSeconds: 10
          timeoutSeconds: 10
        livenessProbe:
          httpGet:
            path: "/health"
            port: {{ $.Values.components.landing.port }}
          initialDelaySeconds: 60
          failureThreshold: 10
          periodSeconds: 10
          timeoutSeconds: 10
        {{ end }}

        resources:
          limits:
            cpu: {{ $.Values.components.landing.resources.limits.cpu }}
            memory: {{ $.Values.components.landing.resources.limits.memory }}
          requests:
            cpu: {{ $.Values.components.landing.resources.requests.cpu }}
            memory: {{ $.Values.components.landing.resources.requests.memory }}

---
apiVersion: v1
kind: Service
metadata:
  name: landing
  namespace: {{ $.Values.components.landing.namespace | quote }}
spec:
  selector:
    app: landing
  ports:
    - protocol: TCP
      port: {{ $.Values.components.landing.port }}
      targetPort: {{ $.Values.components.landing.port }}
      name: landing

{{ if eq $.Values.components.landing.ingress.enabled true }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: landing
  namespace: {{ $.Values.components.landing.namespace | quote }}
  annotations:
    cert-manager.io/cluster-issuer: {{ $.Values.components.landing.ingress.issuer | quote }}
spec:
  ingressClassName: {{ $.Values.components.landing.ingress.class | quote }}
  tls:
  - hosts:
    - {{ $.Values.host | quote }}
    secretName: ingress-tls
  rules:
  - host: {{ $.Values.host | quote }}
    http:
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            name: landing
            port:
              number: {{ $.Values.components.landing.port }}
{{ end }} ## end Ingress IF
