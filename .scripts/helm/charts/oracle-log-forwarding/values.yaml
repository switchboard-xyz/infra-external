alloy:
  basicAuth:
    username: "set-me"
    password: "set-me"
  operator: switchboard
  oracleIPv4: "someIP"
  alloy:
    extraPorts:
    - name: otlp-grpc # The default port for otlp-grpc is 4317, so you need to add this port to the service related to your alloy instance
      port: 4317
      targetPort: 4317
      protocol: TCP
    - name: otlp-http # The default port for otlp-http is 4318, so you need to add this port to the service related to your alloy instance
      port: 4318
      targetPort: 4318
      protocol: TCP
    configMap:
      # -- Content to assign to the new ConfigMap.  This is passed into `tpl` allowing for templating from values.
      content: |-
        // Logs delivery
        loki.write "default" {
          endpoint {
            url = "https://loki.switchboard.xyz/loki/api/v1/push"
            basic_auth {
              username = {{ .Values.basicAuth.username  | quote }}
              password = {{ .Values.basicAuth.password  | quote }}
            }
          }
        }
        // -----------------------
        // SYSTEM LOGS
        // -----------------------
        // local.file_match discovers files on the local filesystem using glob patterns and the doublestar library. It returns an array of file paths.
        local.file_match "node_logs" {
          path_targets = [{
              // Monitor syslog to scrape node-logs
              __path__  = "/var/log/syslog",
              job       = "node/syslog",
              node_name = sys.env("HOSTNAME"),
              operator  = "{{ .Values.operator }}",
              oracleIPv4   = "{{ .Values.oracleIPv4 }}",
          }]
        }

        // loki.source.file reads log entries from files and forwards them to other loki.* components.
        // You can specify multiple loki.source.file components by giving them different labels.
        loki.source.file "node_logs" {
          targets    = local.file_match.node_logs.targets
          forward_to = [loki.write.default.receiver]
        }

        // -----------------------
        // POD LOGS
        // -----------------------
        // discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
        // It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.
        discovery.kubernetes "pod" {
          role = "pod"
        }

        // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
        // If no rules are defined, then the input targets are exported as-is.
        discovery.relabel "pod_logs" {
          targets = discovery.kubernetes.pod.targets

          // Label creation - "namespace" field from "__meta_kubernetes_namespace"
          rule {
            source_labels = ["__meta_kubernetes_namespace"]
            action = "replace"
            target_label = "namespace"
          }

          // Label creation - "pod" field from "__meta_kubernetes_pod_name"
          rule {
            source_labels = ["__meta_kubernetes_pod_name"]
            action = "replace"
            target_label = "pod"
          }

          // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
          rule {
            source_labels = ["__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "container"
          }

          // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
          rule {
            source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
            action = "replace"
            target_label = "app"
          }

          // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
          // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
          rule {
            source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "job"
            separator = "/"
            replacement = "$1"
          }

          // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
          // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
          rule {
            source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "__path__"
            separator = "/"
            replacement = "/var/log/pods/*$1/*.log"
          }

          // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
          rule {
            source_labels = ["__meta_kubernetes_pod_container_id"]
            action = "replace"
            target_label = "container_runtime"
            regex = "^(\\S+):\\/\\/.+$"
            replacement = "$1"
          }
        }

        // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
        loki.source.kubernetes "pod_logs" {
          targets    = discovery.relabel.pod_logs.output
          forward_to = [loki.process.pod_logs.receiver]
        }

        // loki.process receives log entries from other Loki components, applies one or more processing stages,
        // and forwards the results to the list of receivers in the component's arguments.
        loki.process "pod_logs" {
          stage.static_labels {
              values = {
                operator   = "{{ .Values.operator }}",
                oracleIPv4   = "{{ .Values.oracleIPv4 }}",
              }
          }

          forward_to = [loki.write.default.receiver]
        }

        // -----------------------
        // KUBERNETES EVENTS
        // -----------------------
        // loki.source.kubernetes_events tails events from the Kubernetes API and converts them
        // into log lines to forward to other Loki components.
        loki.source.kubernetes_events "cluster_events" {
          job_name   = "integrations/kubernetes/eventhandler"
          log_format = "logfmt"
          forward_to = [
            loki.process.cluster_events.receiver,
          ]
        }

        // loki.process receives log entries from other loki components, applies one or more processing stages,
        // and forwards the results to the list of receivers in the component's arguments.
        loki.process "cluster_events" {
          forward_to = [loki.write.default.receiver]

          stage.static_labels {
            values = {
              operator   = "{{ .Values.operator }}",
              oracleIPv4   = "{{ .Values.oracleIPv4 }}",
            }
          }

          stage.labels {
            values = {
              kubernetes_cluster_events = "job",
            }
          }
        }
        // -----------------------
        // Tracing
        // -----------------------
        // otelcol.receiver.otlp accepts OTLP-formatted data over the network and forwards it to other otelcol.* components.
        otelcol.receiver.otlp "otlp_receiver" {
          grpc {
            endpoint = "0.0.0.0:4317"
          }
          http {
            endpoint = "0.0.0.0:4318"
          }
          output {
            traces = [otelcol.processor.k8sattributes.default.input,]
          }
        }
        otelcol.processor.k8sattributes "default" {
          wait_for_metadata = true
          passthrough = false
          extract {
            label {
              from      = "pod"
              key_regex = "(.*)/(.*)"
              tag_name  = "$1.$2"
            }
            metadata = [
                  "k8s.namespace.name",
                  "k8s.deployment.name",
                  "k8s.statefulset.name",
                  "k8s.daemonset.name",
                  "k8s.cronjob.name",
                  "k8s.job.name",
                  "k8s.node.name",
                  "k8s.pod.name",
                  "k8s.pod.uid",
                  "k8s.container.name",
                  "container.image.name",
                  "container.image.tag",
                  "k8s.pod.start_time",
            ]
          }

          output {
            traces  = [otelcol.processor.attributes.default.input]
          }
        }
        otelcol.processor.attributes "default" {
          action {
              key = "operator"
              value = "{{ .Values.operator }}"
              action = "insert"
          }
          action {
              key = "oracleIPv4"
              value = "{{ .Values.oracleIPv4 }}"
              action = "insert"
          }

          output {
            traces  = [otelcol.processor.batch.default.input]
          }
        }


        // batch trace data before sending it to the exporter.
        otelcol.processor.batch "default" {
          output {
            traces  = [otelcol.exporter.otlphttp.tempo.input]
          }
        }
        otelcol.exporter.otlphttp "tempo" {
          client {
            endpoint = "https://tempo.switchboard.xyz:443"
          }
        }
